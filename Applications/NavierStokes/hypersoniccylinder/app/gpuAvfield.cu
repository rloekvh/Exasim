template <typename T>  __global__  void kernelgpuAvfield(T *f, T *xdg, T *udg, T *odg, T *wdg, T *uinf, T *param, T time, int ng, int nc, int ncu, int nd, int ncx, int nco, int ncw, int nce, int npe, int ne)
{
	int i = threadIdx.x + blockIdx.x * blockDim.x;
	while (i<ng) {
		int j = i%npe;
		int k = (i-j)/npe;
		T param1 = param[0];
		T param2 = param[1];
		T param3 = param[2];
		T param4 = param[3];
		T param5 = param[4];
		T param6 = param[5];
		T param7 = param[6];
		T param8 = param[7];
		T param9 = param[8];
		T param10 = param[9];
		T param11 = param[10];
		T param12 = param[11];
		T param13 = param[12];
		T param14 = param[13];
		T param15 = param[14];
		T param16 = param[15];
		T param17 = param[16];
		T uinf1 = uinf[0];
		T uinf2 = uinf[1];
		T xdg1 = xdg[j+npe*0+npe*ncx*k];
		T xdg2 = xdg[j+npe*1+npe*ncx*k];
		T udg1 = udg[j+npe*0+npe*nc*k];
		T udg2 = udg[j+npe*1+npe*nc*k];
		T udg3 = udg[j+npe*2+npe*nc*k];
		T udg4 = udg[j+npe*3+npe*nc*k];
		T udg5 = udg[j+npe*4+npe*nc*k];
		T udg6 = udg[j+npe*5+npe*nc*k];
		T udg7 = udg[j+npe*6+npe*nc*k];
		T udg8 = udg[j+npe*7+npe*nc*k];
		T udg9 = udg[j+npe*8+npe*nc*k];
		T udg10 = udg[j+npe*9+npe*nc*k];
		T udg11 = udg[j+npe*10+npe*nc*k];
		T udg12 = udg[j+npe*11+npe*nc*k];
		T odg1 = odg[j+npe*0+npe*nco*k];
		T odg2 = odg[j+npe*1+npe*nco*k];
		T t2 = 1.0/param15;
		T t3 = 1.0/3.141592653589793;
		T t4 = udg1*1.0E3;
		T t5 = t4-1.0E1;
		T t6 = atan(t5);
		T t7 = t3*t6;
		T t8 = t7+1.0/2.0;
		T t9 = udg1-1.0/1.0E2;
		T t10 = t8*t9;
		T t11 = t10+1.031830978008052E-2;
		T t12 = 1.0/t11;
		T t15 = t12*udg2*udg5;
		T t13 = -t15+udg6;
		T t17 = t12*udg3*udg9;
		T t14 = -t17+udg11;
		T t16 = t12*t13*1.0E3;
		T t18 = t12*t14*1.0E3;
		T t19 = t16+t18-1.0E7;
		T t20 = atan(t19);
		T t21 = t3*t20;
		T t22 = t21-1.0/2.0;
		T t23 = t12*t13;
		T t24 = t12*t14;
		T t25 = t23+t24-1.0E4;
		T t42 = t22*t25;
		T t43 = t42-1.999999968169022E4;
		T t44 = t22*t25*1.0E3;
		T t45 = t44-1.999999968169022E7;
		T t46 = atan(t45);
		T t47 = t3*t46;
		T t48 = t47+1.0/2.0;
		T t49 = t43*t48;
		T t26 = t49-t22*t25+1.0E4;
		T t27 = t26*t26;
		T t29 = t12*udg3*udg5;
		T t30 = t29-udg7;
		T t31 = t12*t30;
		T t32 = t12*udg2*udg9;
		T t33 = t12*(t32-udg10);
		T t28 = -t31+t33;
		T t34 = t28*t28;
		T t35 = sqrt(t34);
		T t36 = t35*1.0E3;
		T t37 = atan(t36);
		T t38 = t3*t37;
		T t39 = t38+1.0/2.0;
		T t40 = t35*t39;
		T t59 = t40-9.99999968169022E3;
		T t60 = t35*t39*1.0E3;
		T t61 = t60-9.99999968169022E6;
		T t62 = atan(t61);
		T t63 = t3*t62;
		T t64 = t63+1.0/2.0;
		T t65 = t59*t64;
		T t41 = t40-t65;
		T t50 = -t42+t49+1.0E4;
		T t51 = 1.0/(t11*t11);
		T t52 = udg2*udg2;
		T t53 = (t51*t52)/2.0;
		T t54 = udg3*udg3;
		T t55 = (t51*t54)/2.0;
		T t56 = t53+t55;
		T t57 = param1-1.0;
		T t58 = t50*t50;
		T t66 = t40-t65;
		T t67 = param1*2.0;
		T t68 = t67-2.0;
		T t69 = param1+1.0;
		T t70 = 1.0/t69;
		T t71 = t56*t57*1.0E3;
		T t83 = param1*t12*udg4*1.0E3;
		T t72 = t71-t83+1.0/1.0E1;
		T t73 = atan(t72);
		T t74 = t3*t73;
		T t75 = t74-1.0/2.0;
		T t76 = t56*t57;
		T t84 = param1*t12*udg4;
		T t77 = t76-t84+1.0E-4;
		T t78 = t75*t77;
		T t79 = t78+4.183097800805168E-4;
		T t80 = t68*t70*t79;
		T t81 = 1.0/sqrt(t80);
		T t82 = t40-t65;
		T t85 = param16*1.0E3;
		T t86 = t40-t65;
		T t87 = t40-t65;
		T t88 = t40-t65;
		T t89 = param1*param1;
		T t90 = t89-1.0;
		T t91 = 1.0/sqrt(t90);
		f[j+npe*0+npe*nce*k] = -odg2*param12*t2*t11*((t3*atan(param17*t91*-1.0E3+(t3*atan(t85-(odg2*t2*t50*t58*t81*1.0E3)/(t58+t86*t86+1.0E-16))-1.0/2.0)*(param16-(odg2*t2*t50*t58*t81)/(t58+t82*t82+1.0E-16))*1.0E3+3.183097800805168E-1)+1.0/2.0)*(-param17*t91+(t3*atan(t85-(odg2*t2*t50*t58*t81*1.0E3)/(t58+t88*t88+1.0E-16))-1.0/2.0)*(param16-(odg2*t2*t50*t58*t81)/(t58+t87*t87+1.0E-16))+3.183097800805168E-4)-(t3*atan(t85-(odg2*t2*t50*t58*t81*1.0E3)/(t58+t66*t66+1.0E-16))-1.0/2.0)*(param16-(odg2*t2*t26*t27*t81)/(t58+t41*t41+1.0E-16)))*sqrt(t80+t51*t52+t51*t54);
		i += blockDim.x * gridDim.x;
	}
}

template <typename T> void gpuAvfield(T *f, T *xdg, T *udg, T *odg, T *wdg, T *uinf, T *param, T time, int ng, int nc, int ncu, int nd, int ncx, int nco, int ncw, int nce, int npe, int ne)
{
	int blockDim = 256;
	int gridDim = (ng + blockDim - 1) / blockDim;
	gridDim = (gridDim>1024)? 1024 : gridDim;
	kernelgpuAvfield<<<gridDim, blockDim>>>(f, xdg, udg, odg, wdg, uinf, param, time, ng, nc, ncu, nd, ncx, nco, ncw, nce, npe, ne);
}

template void gpuAvfield(double *, double *, double *, double *, double *, double *, double *, double, int, int, int, int, int, int, int, int, int, int);
template void gpuAvfield(float *, float *, float *, float *, float *, float *, float *, float, int, int, int, int, int, int, int, int, int, int);
